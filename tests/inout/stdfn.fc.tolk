const OP_BURN = 123;
const ERR_INVALID = 0x456;

fun main(c: cell) {
    contract.getData();
    contract.setData(c3);
    blockchain.now();

    var t = createEmptyTuple();
    t.push(10);

    c.calculateSizeStrict(10);
    c.calculateSizeStrict(10);
    c.calculateSize(10);
    c.calculateSize(10);

    if (sender.bitsEqual(owner)) {
        var c = beginCell().endCell();
        c.hash();
        c.hash();
        c.beginParse().isEnd();
        s.remainingRefsCount();
    }
    assert(sender_address.bitsEqual(owner_address)) throw 401;

    depth();    // incorrect
    b.depth();

    random.uint256();
    random.initialize();
}
